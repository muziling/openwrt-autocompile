diff --git a/libraries/common/src/main/java/androidx/media3/common/MimeTypes.java b/libraries/common/src/main/java/androidx/media3/common/MimeTypes.java
index bd2052f..bd250f7 100644
--- a/libraries/common/src/main/java/androidx/media3/common/MimeTypes.java
+++ b/libraries/common/src/main/java/androidx/media3/common/MimeTypes.java
@@ -16,6 +16,7 @@
 package androidx.media3.common;
 
 import android.text.TextUtils;
+import android.util.Log;
 import androidx.annotation.Nullable;
 import androidx.annotation.VisibleForTesting;
 import androidx.media3.common.util.Assertions;
@@ -420,6 +421,7 @@ public final class MimeTypes {
     if (codec == null) {
       return null;
     }
+    Log.d("muziling, getMediaMimeType codec=", codec);
     codec = Ascii.toLowerCase(codec.trim());
     if (codec.startsWith("avc1") || codec.startsWith("avc3")) {
       return MimeTypes.VIDEO_H264;
diff --git a/libraries/exoplayer_rtsp/src/main/java/androidx/media3/exoplayer/rtsp/MediaDescription.java b/libraries/exoplayer_rtsp/src/main/java/androidx/media3/exoplayer/rtsp/MediaDescription.java
index 66ac29c..cfc75e5 100644
--- a/libraries/exoplayer_rtsp/src/main/java/androidx/media3/exoplayer/rtsp/MediaDescription.java
+++ b/libraries/exoplayer_rtsp/src/main/java/androidx/media3/exoplayer/rtsp/MediaDescription.java
@@ -118,6 +118,7 @@ import java.util.HashMap;
     private static final int RTP_STATIC_PAYLOAD_TYPE_PCMA = 8;
     private static final int RTP_STATIC_PAYLOAD_TYPE_L16_STEREO = 10;
     private static final int RTP_STATIC_PAYLOAD_TYPE_L16_MONO = 11;
+    private static final int RTP_STATIC_PAYLOAD_TYPE_MP2T = 33;
 
     private final String mediaType;
     private final int port;
@@ -257,6 +258,12 @@ import java.util.HashMap;
               /* mediaEncoding= */ "L16",
               /* clockRate= */ 44_100,
               /* channelCount= */ 1);
+        case RTP_STATIC_PAYLOAD_TYPE_MP2T:
+          return constructAudioRtpMap(
+              RTP_STATIC_PAYLOAD_TYPE_MP2T,
+              /* mediaEncoding= */ "MP2T",
+              /* clockRate= */ 90_000,
+              /* channelCount= */ 1);
         default:
           throw new IllegalStateException("Unsupported static paylod type " + rtpPayloadType);
       }
diff --git a/libraries/exoplayer_rtsp/src/main/java/androidx/media3/exoplayer/rtsp/RtpPayloadFormat.java b/libraries/exoplayer_rtsp/src/main/java/androidx/media3/exoplayer/rtsp/RtpPayloadFormat.java
index 92a8fb0..ce5163b 100644
--- a/libraries/exoplayer_rtsp/src/main/java/androidx/media3/exoplayer/rtsp/RtpPayloadFormat.java
+++ b/libraries/exoplayer_rtsp/src/main/java/androidx/media3/exoplayer/rtsp/RtpPayloadFormat.java
@@ -17,6 +17,7 @@ package androidx.media3.exoplayer.rtsp;
 
 import static androidx.media3.common.util.Assertions.checkArgument;
 
+import android.util.Log;
 import androidx.annotation.Nullable;
 import androidx.media3.common.C;
 import androidx.media3.common.Format;
@@ -56,6 +57,7 @@ public final class RtpPayloadFormat {
   public static final String RTP_MEDIA_PCMU = "PCMU";
   public static final String RTP_MEDIA_VP8 = "VP8";
   public static final String RTP_MEDIA_VP9 = "VP9";
+  public static final String RTP_MEDIA_MP2T = "MP2T";
 
   /** Returns whether the format of a {@link MediaDescription} is supported. */
   /* package */ static boolean isFormatSupported(MediaDescription mediaDescription) {
@@ -77,6 +79,7 @@ public final class RtpPayloadFormat {
       case RTP_MEDIA_PCMU:
       case RTP_MEDIA_VP8:
       case RTP_MEDIA_VP9:
+      case RTP_MEDIA_MP2T:
         return true;
       default:
         return false;
@@ -91,6 +94,7 @@ public final class RtpPayloadFormat {
    * @throws IllegalArgumentException When the media type is not supported/recognized.
    */
   public static String getMimeTypeFromRtpMediaType(String mediaType) {
+    Log.d("muziling", "getMimeTypeFromRtpMediaType=" + mediaType);
     switch (Ascii.toUpperCase(mediaType)) {
       case RTP_MEDIA_AC3:
         return MimeTypes.AUDIO_AC3;
@@ -114,6 +118,7 @@ public final class RtpPayloadFormat {
       case RTP_MEDIA_H263_2000:
         return MimeTypes.VIDEO_H263;
       case RTP_MEDIA_H264:
+      case RTP_MEDIA_MP2T:
         return MimeTypes.VIDEO_H264;
       case RTP_MEDIA_H265:
         return MimeTypes.VIDEO_H265;
diff --git a/libraries/exoplayer_rtsp/src/main/java/androidx/media3/exoplayer/rtsp/RtspMediaTrack.java b/libraries/exoplayer_rtsp/src/main/java/androidx/media3/exoplayer/rtsp/RtspMediaTrack.java
index 468c635..062ed22 100644
--- a/libraries/exoplayer_rtsp/src/main/java/androidx/media3/exoplayer/rtsp/RtspMediaTrack.java
+++ b/libraries/exoplayer_rtsp/src/main/java/androidx/media3/exoplayer/rtsp/RtspMediaTrack.java
@@ -28,6 +28,7 @@ import static androidx.media3.exoplayer.rtsp.SessionDescription.ATTR_CONTROL;
 import android.net.Uri;
 import android.text.TextUtils;
 import android.util.Base64;
+import android.util.Log;
 import android.util.Pair;
 import androidx.annotation.Nullable;
 import androidx.annotation.VisibleForTesting;
@@ -171,14 +172,25 @@ import com.google.common.collect.ImmutableMap;
    */
   public RtspMediaTrack(
       RtspHeaders rtspHeaders, MediaDescription mediaDescription, Uri sessionUri) {
+                 try {
     checkArgument(
         mediaDescription.attributes.containsKey(ATTR_CONTROL), "missing attribute control");
+                 } catch (Exception e) {
+                         getRootCauseMessage(e);
+                         throw e;
+                 }
     payloadFormat = generatePayloadFormat(mediaDescription);
     uri =
         extractTrackUri(
             rtspHeaders, sessionUri, castNonNull(mediaDescription.attributes.get(ATTR_CONTROL)));
   }
-
+    private void getRootCauseMessage(Throwable th) {
+        for (int i=0; i<10; i++) {
+            if (th.getCause() == null) break;
+            else th = th.getCause();
+        }
+        th.printStackTrace();
+    }
   @Override
   public boolean equals(@Nullable Object o) {
     if (this == o) {
@@ -222,6 +234,7 @@ import com.google.common.collect.ImmutableMap;
     }
 
     ImmutableMap<String, String> fmtpParameters = mediaDescription.getFmtpParametersAsMap();
+    Log.d("muziling", "generatePayloadFormat=" + mimeType);
     switch (mimeType) {
       case MimeTypes.AUDIO_AAC:
         checkArgument(channelCount != C.INDEX_UNSET);
diff --git a/libraries/exoplayer_rtsp/src/main/java/androidx/media3/exoplayer/rtsp/reader/DefaultRtpPayloadReaderFactory.java b/libraries/exoplayer_rtsp/src/main/java/androidx/media3/exoplayer/rtsp/reader/DefaultRtpPayloadReaderFactory.java
index 63883dc..e7a9d14 100644
--- a/libraries/exoplayer_rtsp/src/main/java/androidx/media3/exoplayer/rtsp/reader/DefaultRtpPayloadReaderFactory.java
+++ b/libraries/exoplayer_rtsp/src/main/java/androidx/media3/exoplayer/rtsp/reader/DefaultRtpPayloadReaderFactory.java
@@ -18,6 +18,7 @@ package androidx.media3.exoplayer.rtsp.reader;
 
 import static androidx.media3.common.util.Assertions.checkNotNull;
 
+import android.util.Log;
 import androidx.annotation.Nullable;
 import androidx.media3.common.MimeTypes;
 import androidx.media3.common.util.UnstableApi;
@@ -31,6 +32,7 @@ import androidx.media3.exoplayer.rtsp.RtpPayloadFormat;
   @Override
   @Nullable
   public RtpPayloadReader createPayloadReader(RtpPayloadFormat payloadFormat) {
+    Log.d("muziling", "createPayloadReader=" + payloadFormat.format.sampleMimeType);
     switch (checkNotNull(payloadFormat.format.sampleMimeType)) {
       case MimeTypes.AUDIO_AC3:
         return new RtpAc3Reader(payloadFormat);
